apply plugin: 'com.android.application'
apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.8.1"
}

android {
    compileSdkVersion 27
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "com.simple.studio"
        // 支持gradle全局变量定义
        minSdkVersion project.ANDROID_BUILD_MIN_SDK_VERSION
        targetSdkVersion project.ANDROID_BUILD_TARGET_SDK_VERSION
        versionCode Integer.parseInt(project.APP_VERSION_CODE)
        versionName project.APP_VERSION_NAME
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        resConfigs("zh")
    }
    buildTypes {
        debug {
            testCoverageEnabled = true
            shrinkResources false    // 开启压缩除去无效资源
            minifyEnabled false      // 开启混淆
            manifestPlaceholders = [env_val0: "VAL0", env_val1: "VAL1"]
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        mbeta {
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            // shrinkResources为true时minifyEnabled必须设置为true
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

repositories {
    flatDir {
        dirs '../basefwlibrary/libs'
        dirs 'libs'
    }
}

//configurations.all {
//    resolutionStrategy {
//        force 'org.codehaus.groovy:groovy-all:2.4.15'
//    }
//}

configurations.all {
    resolutionStrategy {
        force 'com.android.support:support-annotations:28.0.0'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    //implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation project(':basefwlibrary')
    implementation project(':jacocolibrary')

    // test && androidTest
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:1.7.1'
    testImplementation 'org.robolectric:robolectric:3.0'
//    testImplementation 'org.robolectric:robolectric:4.0'
    testImplementation 'androidx.test:core:1.0.0'
    // Junit+Mockito+PowerMock
    testImplementation 'org.easymock:easymock:3.6'
    testImplementation "org.mockito:mockito-core:2.8.9"
    testImplementation "org.powermock:powermock-api-mockito2:1.7.3"
    testImplementation 'org.powermock:powermock-core:1.7.4'
    testImplementation 'org.powermock:powermock-module-junit4:1.7.4'
    testImplementation 'org.powermock:powermock-api-easymock:1.7.4'
    testImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
//    androidTestImplementation 'com.jayway.android.robotium:robotium-solo:5.1'
}


def coverageSourceDirs = [
        '../app/src/main/java'
]

task jacocoAndtoidTestDebugReport(type:JacocoReport, dependsOn: "connectedDebugAndroidTest") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../app/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../app/build/outputs/code-coverage/connected/PE-UL00 - 6.0-coverage.ec')

    reports {
        xml.enabled = true
        html.enabled = true
    }
}


